
-- Table: Failed

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | fail_date    | date    |
-- +--------------+---------+
-- Primary key for this table is fail_date.
-- Failed table contains the days of failed tasks.
-- Table: Succeeded

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | success_date | date    |
-- +--------------+---------+
-- Primary key for this table is success_date.
-- Succeeded table contains the days of succeeded tasks.
 

-- A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

-- Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.

-- period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

-- Order result by start_date.

-- The query result format is in the following example:

-- Failed table:
-- +-------------------+
-- | fail_date         |
-- +-------------------+
-- | 2018-12-28        |
-- | 2018-12-29        |
-- | 2019-01-04        |
-- | 2019-01-05        |
-- +-------------------+

-- Succeeded table:
-- +-------------------+
-- | success_date      |
-- +-------------------+
-- | 2018-12-30        |
-- | 2018-12-31        |
-- | 2019-01-01        |
-- | 2019-01-02        |
-- | 2019-01-03        |
-- | 2019-01-06        |
-- +-------------------+


-- Result table:
-- +--------------+--------------+--------------+
-- | period_state | start_date   | end_date     |
-- +--------------+--------------+--------------+
-- | succeeded    | 2019-01-01   | 2019-01-03   |
-- | failed       | 2019-01-04   | 2019-01-05   |
-- | succeeded    | 2019-01-06   | 2019-01-06   |
-- +--------------+--------------+--------------+


22/02/2022


select 'Success' as period_state , startdate, case 
when lead is null then startdate 
when lead is not null then lead 
end as enddate   from 
(
select success_date as startdate, 
lead(success_date,1) OVER (ORDER BY success_date) as LEAD, 
datediff(day, success_date,lead(success_date,1) OVER (ORDER BY success_date)) as chk
from Succeeded
where success_date between '2019-01-01' and '2019-12-31'
) as t1
where chk=1 or chk is null
union all
select 'Failed' as period_state , startdate, case 
when lead is null then startdate 
when lead is not null then lead 
end as enddate   from 
(
select faildate as startdate, 
lead(faildate,1) OVER (ORDER BY faildate) as LEAD, 
datediff(day, faildate,lead(faildate,1) OVER (ORDER BY faildate)) as chk
from failed
where faildate between '2019-01-01' and '2019-12-31'
) as t1
where chk=1 or chk is null
order by 2                     
                                  
                                  
                                  
                                  
                         






