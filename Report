
-- Table: Failed

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | fail_date    | date    |
-- +--------------+---------+
-- Primary key for this table is fail_date.
-- Failed table contains the days of failed tasks.
-- Table: Succeeded

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | success_date | date    |
-- +--------------+---------+
-- Primary key for this table is success_date.
-- Succeeded table contains the days of succeeded tasks.
 

-- A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

-- Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.

-- period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

-- Order result by start_date.

-- The query result format is in the following example:

-- Failed table:
-- +-------------------+
-- | fail_date         |
-- +-------------------+
-- | 2018-12-28        |
-- | 2018-12-29        |
-- | 2019-01-04        |
-- | 2019-01-05        |
-- +-------------------+

-- Succeeded table:
-- +-------------------+
-- | success_date      |
-- +-------------------+
-- | 2018-12-30        |
-- | 2018-12-31        |
-- | 2019-01-01        |
-- | 2019-01-02        |
-- | 2019-01-03        |
-- | 2019-01-06        |
-- +-------------------+


-- Result table:
-- +--------------+--------------+--------------+
-- | period_state | start_date   | end_date     |
-- +--------------+--------------+--------------+
-- | succeeded    | 2019-01-01   | 2019-01-03   |
-- | failed       | 2019-01-04   | 2019-01-05   |
-- | succeeded    | 2019-01-06   | 2019-01-06   |
-- +--------------+--------------+--------------+


22/02/2022 --- try 1  ------


SELECT 'Success' AS period_state,
       startdate,
       CASE
         WHEN lead IS NULL THEN startdate
         WHEN lead IS NOT NULL THEN lead
       END       AS enddate
FROM   (SELECT success_date                                            AS
               startdate,
               Lead(success_date, 1)
                 OVER (
                   ORDER BY success_date)                              AS LEAD,
               Datediff(day, success_date, Lead(success_date, 1)
                                             OVER (
                                               ORDER BY success_date)) AS chk
        FROM   succeeded
        WHERE  success_date BETWEEN '2019-01-01' AND '2019-12-31') AS t1
WHERE  chk = 1
        OR chk IS NULL
UNION ALL
SELECT 'Failed' AS period_state,
       startdate,
       CASE
         WHEN lead IS NULL THEN startdate
         WHEN lead IS NOT NULL THEN lead
       END      AS enddate
FROM   (SELECT faildate                                        AS startdate,
               Lead(faildate, 1)
                 OVER (
                   ORDER BY faildate)                          AS LEAD,
               Datediff(day, faildate, Lead(faildate, 1)
                                         OVER (
                                           ORDER BY faildate)) AS chk
        FROM   failed
        WHERE  faildate BETWEEN '2019-01-01' AND '2019-12-31') AS t1
WHERE  chk = 1
        OR chk IS NULL
ORDER  BY 2 

